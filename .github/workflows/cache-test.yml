name: "Test Cache For Terraform"

on:
  workflow_dispatch:
  # push:
  #   branches:
  #     - main
  #   paths:
  #      - 'workspaces/tf-live-shared/**'
  #      - '.github/workflows/tf-live-shared.yml'
  # pull_request:
  #   branches: [ main ]
  #   paths:
  #      - 'workspaces/tf-live-shared/**'
  #      - '.github/workflows/tf-live-shared.yml'

jobs:
  terraform1:
    name: "main-job-ololo"
    runs-on: ubuntu-latest
    env:
      PATH_TERRAFORM_PROVIDERS: .terraform/providers/
      TF_ORIGIN_PROVIDER: providers.tf
      WORKING_DIRECTORY: tf-origins
    defaults:
      run:
        working-directory: tf-origins/ #my tf-files
    steps:
      - uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: true
          terraform_version: 1.2.5

      - name: ls -la
        run: |
          pwd
          echo -e ":.terraform:\n"
          ls -la .terraform
          echo -e "\n$PATH_TERRAFORM_PROVIDERS"
          ls -la $PATH_TERRAFORM_PROVIDERS
          echo -e "\ntest -d:\n"
          [[ ! -d $PATH_TERRAFORM_PROVIDERS ]] ; echo $?
        continue-on-error: true

      #сначала кешируем файл providers.tf и сверяем его
      - name: Check file providers.tf
        id: check_file_origin_providers_tf
        uses: actions/cache@v3
        with:
          path: tf-origins/.terraform/
          key: ${{ runner.os }}-${{ hashFiles('tf-origins/providers.tf') }}

      #если файл providers.tf не тот, то запускаем Init
      - name: First Terraform Init
        if: ${{ steps.check_file_origin_providers_tf.outputs.cache-hit != 'true' }}
        #if: ${{ echo $([ -d snap ] ; echo $?) }}        
        id: first_init
        run: |
          echo "startuem"
          terraform init

      #кешируем провайдеры
      - name: Cache_Terraform_Providers
        id: cache_providers
        uses: actions/cache@v3
        with:
          path: |
            tf-origins/.terraform/providers
            tf-origins/.terraform.lock.hcl
          #key checks file providers.tf and cached files from path '.terraform/providers/**'. If any of them was changed, new cache will be created
          key: ${{ runner.os }}-providers-${{ hashFiles('tf-origins/providers.tf') }}-${{ hashFiles('tf-origins/.terraform/providers/') }}
          #key: ${{ runner.os }}-providers-${{ hashFiles('tf-origins/providers.tf') }}

      - name: ls -la
        run: |
          echo -e ":ls -la:\n"
          ls -la
          echo -e ":.terraform:\n"
          ls -la .terraform
          echo -e ":$PATH_TERRAFORM_PROVIDERS:\n"
          ls -la $PATH_TERRAFORM_PROVIDERS
          echo -e "\ntest -d:\n"
          [[ ! -d $PATH_TERRAFORM_PROVIDERS ]] ; echo $?
        continue-on-error: true

      #если из кеша по какой-либо причине не были извлечены провайдеры, то запускаем Init заново
      #если по какой-то причине не была пройдена Init ранее, то она пройдёт сейчас
      - name: Terraform Init
        if: ${{ steps.cache_providers.outputs.cache-hit != 'true' && steps.first_init.outcome != 'success'}}
        id: init
        run: terraform init
      #тут, наверное, нужно добавить какой-нибудь output для контроля, ведь этот шаг будет запускаться в случае аварии с кешем или с Init выше

      - name: ls -la
        run: |
          echo -e ":.terraform:\n"
          ls -la .terraform
          echo -e ":$PATH_TERRAFORM_PROVIDERS:\n"
          ls -la .terraform/providers/

      - name: Terraform Plan
        # id: plan
        run: terraform plan -no-color

      - name: Terraform Apply
        run: terraform apply -auto-approve
