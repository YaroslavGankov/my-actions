name: "Test Cache 1"

on:
  workflow_dispatch:
  
jobs:
  terraform1:
    name: "test1"
    runs-on: ubuntu-latest
    env:
      PATH_TERRAFORM_PROVIDERS: .terraform/providers/
      TF_ORIGIN_PROVIDER: providers.tf
      WORKING_DIRECTORY: tf-origins #my dir with tf-files
      TF_PLUGIN_CACHE_DIR: $HOME/.terraform.d/plugin-cache
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }} 
    steps:
      - uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: true
          terraform_version: 1.2.5

      # - name: Export TF_PLUGIN_CACHE_DIR
      #   run: export TF_PLUGIN_CACHE_DIR="$HOME/.terraform.d/plugin-cache"

      - name: ls -la
        run: |
          pwd
          echo "echo TF_PLUGIN_CACHE_DIR:"
          echo $TF_PLUGIN_CACHE_DIR
        continue-on-error: true

      #добавляем файл настройки для плагинов
      - name: Make dir $HOME/.terraform.d/plugin-cache
        run: |
          ls la $TF_PLUGIN_CACHE_DIR
          export TF_PLUGIN_CACHE_DIR="$TF_PLUGIN_CACHE_DIR"
          echo $TF_PLUGIN_CACHE_DIR
          mkdir -p $TF_PLUGIN_CACHE_DIR

      #сначала кешируем файл providers.tf и сверяем его
      - name: Cache. Check file providers.tf
        id: check_file_origin_providers_tf
        uses: actions/cache@v3
        with:
          ##working variant:
          #path: tf-origins/providers.tf
          #path: ${{ env.WORKING_DIRECTORY, '/', env.TF_ORIGIN_PROVIDER} ) }}
          path: ${{ format('{0}{1}{2}',env.WORKING_DIRECTORY,'/',env.TF_ORIGIN_PROVIDER) }}
          #key: ${{ runner.os }}-${{ hashFiles('tf-origins/providers.tf') }}
          key: ${{ runner.os }}-${{ hashFiles(format('{0}{1}{2}',env.WORKING_DIRECTORY,'/',env.TF_ORIGIN_PROVIDER)) }}-16

      #если файл providers.tf не тот, то запускаем Init
      - name: First Terraform Init
        if: ${{ steps.check_file_origin_providers_tf.outputs.cache-hit != 'true' }}
        id: first_init
        run: |
          echo "startuem"
          terraform init
          sleep 5

      - name: ls -la
        run: |
          tree -a $HOME | grep "terraform.d"
          tree -a $WORKING_DIRECTORY
        continue-on-error: true

      #кешируем провайдеры. И кешируем их лишь в случае успешного выполнения first init
      - name: Cache_Terraform
        id: cache_providers
        uses: actions/cache@v3
        with:
          #path: ${{ runner.temp }}/_github_home/.terraform.d/plugin-cache #if use .terraformrc with cache
          path: |
            ${{ format('{0}{1}{2}',env.WORKING_DIRECTORY,'/',env.PATH_TERRAFORM_PROVIDERS) }}
            ~/.terraform.d/plugin-cache
          #key checks file providers.tf and cached files from path '.terraform/providers/**'. If any of them was changed, new cache will be created
          key: ${{ runner.os }}-providers-${{ hashFiles(format('{0}{1}{2}',env.WORKING_DIRECTORY,'/',env.TF_ORIGIN_PROVIDER)) }}-16
          #key: ${{ runner.os }}-providers-${{ hashFiles('tf-origins/providers.tf') }}

      - name: ls -la
        run: |
          echo "tree HOME:"
          tree $HOME | grep -A 20 -B 20 "terraform.d"
          echo "ls -la HOME:"
          ls -la $HOME
          tree -a $WORKING_DIRECTORY
          echo -e ":ls -la:\n"
          ls -la ${{ runner.temp }}/_github_home/.terraform.d/plugin-cache
          ls -la .
          echo -e ":.terraform:\n"
          ls -la .terraform
          echo -e ":$PATH_TERRAFORM_PROVIDERS:\n"
          ls -la $PATH_TERRAFORM_PROVIDERS
          echo -e "\ntest -d:\n"
          [[ ! -d $PATH_TERRAFORM_PROVIDERS ]] ; echo $?
        continue-on-error: true

      - name: tree -a $HOME/.terraform.d/plugin-cache
        run: |
          tree -a $HOME/.terraform.d/plugin-cache
        continue-on-error: true

      #Init с кешированными данными
      - name: Terraform Init
        if: ${{ steps.first_init.outcome != 'success' }}
        id: init
        run: |
          echo "run terraform init with cached data"
          terraform init
          sleep 5
      #тут, наверное, нужно добавить какой-нибудь output для контроля, ведь этот шаг будет запускаться в случае аварии с кешем или с Init выше
    
      - name: ls -la
        run: |
          echo -e ":.terraform:\n"
          ls -la .terraform
          echo -e ":$PATH_TERRAFORM_PROVIDERS:\n"
          ls -la .terraform/providers/
        continue-on-error: true

      - name: Terraform Plan
        # id: plan
        run: terraform plan -no-color

      - name: Terraform Apply
        run: terraform apply -auto-approve
