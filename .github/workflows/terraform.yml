name: Terraform init/plan/apply
on:
  push:
#    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    env:
      PATH_TERRAFORM_PROVIDERS: .terraform/providers/
      TF_ORIGIN_PROVIDER: providers.tf
      WORKING_DIRECTORY: terraform_lock_hcl #my dir with tf-files
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: true
          terraform_version: 1.2.5
      
      #  #сначала кешируем файл providers.tf и сверяем его
      # - name: Check file providers.tf
      #   id: check_file_origin_providers_tf
      #   uses: actions/cache@v3
      #   with:
      #     ##working variant:
      #     #path: tf-origins/providers.tf
      #     #path: ${{ env.WORKING_DIRECTORY, '/', env.TF_ORIGIN_PROVIDER} ) }}
      #     path: ${{ format('{0}{1}{2}',env.WORKING_DIRECTORY,'/',env.TF_ORIGIN_PROVIDER) }}
      #     #key: ${{ runner.os }}-${{ hashFiles('tf-origins/providers.tf') }}
      #     key: ${{ runner.os }}-${{ hashFiles(format('{0}{1}{2}',env.WORKING_DIRECTORY,'/',env.TF_ORIGIN_PROVIDER)) }}-1

      # #если файл providers.tf не тот, то запускаем Init
      # - name: First Terraform Init
      #   if: ${{ steps.check_file_origin_providers_tf.outputs.cache-hit != 'true' }}
      #   id: first_init
      #   run: |
      #     echo "startuem"
      #     terraform init
      #     sleep 5

      # #кешируем провайдеры
      # - name: Cache_Terraform_Providers
      #   id: cache_providers
      #   uses: actions/cache@v3
      #   with:
      #     path: |
      #       ${{ format('{0}{1}{2}',env.WORKING_DIRECTORY,'/',env.PATH_TERRAFORM_PROVIDERS) }}
      #       ${{ format('{0}{1}',env.WORKING_DIRECTORY,'/.terraform.lock.hcl') }}
      #     #key checks file providers.tf and cached files from path '.terraform/providers/**'. If any of them was changed, new cache will be created
      #     key: ${{ runner.os }}-providers-${{ hashFiles(format('{0}{1}{2}',env.WORKING_DIRECTORY,'/',env.TF_ORIGIN_PROVIDER)) }}
      #     #key: ${{ runner.os }}-providers-${{ hashFiles('tf-origins/providers.tf') }}
      
      #если из кеша по какой-либо причине не были извлечены провайдеры, то запускаем Init заново
      #если по какой-то причине не была пройдена Init ранее, то она пройдёт сейчас
      - name: Terraform Init
        # if: ${{ steps.cache_providers.outputs.cache-hit != 'true' && steps.first_init.outcome != 'success' }}
        id: init
        run: |
          terraform init
      #тут, наверное, нужно добавить какой-нибудь output для контроля, ведь этот шаг будет запускаться в случае аварии с кешем или с Init выше

      - name: Debug linux
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          echo "ls -la"
          ls -la
          echo "-----------------------------------"
          cat .terraform.lock.hcl
          echo "-----------------------------------"
      
      - name: Debug windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          echo "dir"
          dir
          echo "-----------------------------------"
          TYPE .terraform.lock.hcl
          echo "-----------------------------------"

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color

      - name: Terraform Apply
        run: terraform apply -auto-approve
